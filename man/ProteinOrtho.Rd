% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/ProteinOrtho.R
\name{ProteinOrtho}
\alias{ProteinOrtho}
\title{Orthology Inference with ProteinOrtho}
\usage{
ProteinOrtho(query_file, subject_files, po_params = NULL,
  eval = "1E-5", seq_type = "protein", format = "fasta",
  po_path = NULL, comp_cores = 1, delete_files = FALSE)
}
\arguments{
\item{query_file}{a character string specifying the path to the sequence file of interest (query organism).}

\item{subject_files}{a character string specifying the paths to the sequence files of interest (subject organisms).}

\item{po_params}{a character string specifying additional parameters that shall be handed to the ProteinOrtho call,
e.g. \code{po_params} = \code{"-identity=35 -cov=75"}. See https://www.bioinf.uni-leipzig.de/Software/proteinortho/manual.html
for parameter details.}

\item{eval}{a numeric value specifying the E-Value cutoff for BLAST hit detection.}

\item{seq_type}{a character string specifying the sequence type stored in the input file.
Options are: "protein", or "dna". ProteinOrtho can only handle protein or nucleotide sequences stored in fasta files.}

\item{format}{when using ProteinOrtho you can only specify \code{format} = \code{"fasta"}.}

\item{po_path}{a character string specifying the execution path to the \code{proteinortho5.pl} file (in case it is not sored
in the standard execution path).}

\item{comp_cores}{a numeric value specifying the number of cores that shall be
used to run ProteinOrtho.}

\item{delete_files}{a boolean value specifying whether the folder '_ProteinOrtho' that stored the
ProteinOrtho output files shall be removed after the analysis. Default is \code{delete_files} = \code{FALSE}.}
}
\value{
a data.frame storing the ProteinOrtho output.
}
\description{
This function takes a query organism and a set of subject organisms
and performs orthology inference using ProteinOrtho as orthology detection program (methodology).
}
\details{
This function provides an interface to the ProteinOrtho program
and performs orthology inference using the ProteinOrtho methodology.

ProteinOrtho is a orthology inference program to detect orthologous genes within different species. 
For this purpose it compares similarities of given gene sequences and clusters them to find significant groups. 
To enhance the prediction accuracy, the relative order of genes (synteny) can be used as additional feature for the discrimination of orthologs.
(source: https://www.bioinf.uni-leipzig.de/Software/proteinortho/manual.html).
}
\examples{
\dontrun{

# finding orthologs between Arabidopsis thaliana and Arabidopsis lyrata genes
ProteinOrtho(query_file = system.file('seqs/ortho_thal_aa.fasta', package = 'orthologr'),
             subject_files = system.file('seqs/ortho_lyra_aa.fasta', package = 'orthologr'),
             seq_type = "protein",format = "fasta")
             
   
                       
# finding orthologs between Arabidopsis thaliana and Arabidopsis lyrata genes
# using multicore processing
ProteinOrtho(query_file = system.file('seqs/ortho_thal_aa.fasta', package = 'orthologr'),
             subject_files = system.file('seqs/ortho_lyra_aa.fasta', package = 'orthologr'),
             seq_type = "protein",format = "fasta", comp_cores = 2)
             
     
                                             
                                                 
# it is also possible to run ProteinOrtho using the synteny option
# make sure you can provide a *.gff file
# see https://www.bioinf.uni-leipzig.de/Software/proteinortho/manual.html for details
ProteinOrtho(query_file = system.file('seqs/ortho_thal_aa.fasta', package = 'orthologr'),
             subject_files = system.file('seqs/ortho_lyra_aa.fasta', package = 'orthologr'),
             seq_type = "protein",format = "fasta",po_params = "-synteny")
   
 
 
 # defining 3 subject organisms: A. lyrata, B. rapa, and T. halophila
  subject_organisms <- c(system.file('seqs/example_brapa_aa.faa', package = 'orthologr'),
                         system.file('seqs/example_alyra_aa.faa', package = 'orthologr'),
                         system.file('seqs/example_thalo_aa.faa', package = 'orthologr'))

  ProteinOrtho(query_file = system.file('seqs/example_athal_aa.faa', package = 'orthologr'),
            subject_files = subject_organisms,
            seq_type = "protein")
            
            
 
# in case you need to specify the BLAST path or want to add 
# additional parameters to the BLAST run, please use the 'po_params' argument
ProteinOrtho(query_file = system.file('seqs/ortho_thal_aa.fasta', package = 'orthologr'),
             subject_files = system.file('seqs/ortho_lyra_aa.fasta', package = 'orthologr'),
             seq_type = "protein",format = "fasta",
             po_params = "-blastpath='path/to/blastp' -blastParameters='-max_target_seqs 1'")
             
        
             
                       
# finding orthologs between Arabidopsis thaliana and Arabidopsis lyrata genes
# using "dna" sequences
ProteinOrtho(query_file = system.file('seqs/ortho_thal_cds.fasta', package = 'orthologr'),
             subject_files = system.file('seqs/ortho_lyra_cds.fasta', package = 'orthologr'),
             seq_type = "dna",format = "fasta")    
             


                                                                     
# you can also clean up all output files generated by ProteinOrtho
# using the 'delete_files' argument
ProteinOrtho(query_file = system.file('seqs/ortho_thal_aa.fasta', package = 'orthologr'),
             subject_files = system.file('seqs/ortho_lyra_aa.fasta', package = 'orthologr'),
             seq_type = "protein",format = "fasta", delete_files = TRUE)      
             
                                                  

}
}
\references{
Lechner M et al. (2011) Proteinortho: Detection of (Co-)orthologs in large-scale analysis. BMC Bioinformatics 2011, 12:124.

https://www.bioinf.uni-leipzig.de/Software/proteinortho/manual.html
}
\seealso{
\code{\link{orthologs}}
}
\author{
Hajk-Georg Drost
}
