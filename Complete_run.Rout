
R version 3.0.2 (2013-09-25) -- "Frisbee Sailing"
Copyright (C) 2013 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

[Previously saved workspace restored]

> 
> 
> library(seqinr)
> library(ape)

Attaching package: ‘ape’

The following objects are masked from ‘package:seqinr’:

    as.alignment, consensus

> library(data.table)
> library(parallel)
> library(doParallel)
Loading required package: foreach
Loading required package: iterators
> library(dplyr)

Attaching package: ‘dplyr’

The following object is masked from ‘package:data.table’:

    last

The following object is masked from ‘package:seqinr’:

    query

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

> library(devtools)
> library("Biostrings", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.0")
Loading required package: BiocGenerics

Attaching package: ‘BiocGenerics’

The following objects are masked from ‘package:dplyr’:

    intersect, setdiff, union

The following objects are masked from ‘package:parallel’:

    clusterApply, clusterApplyLB, clusterCall, clusterEvalQ,
    clusterExport, clusterMap, parApply, parCapply, parLapply,
    parLapplyLB, parRapply, parSapply, parSapplyLB

The following object is masked from ‘package:stats’:

    xtabs

The following objects are masked from ‘package:base’:

    anyDuplicated, append, as.data.frame, as.vector, cbind, colnames,
    duplicated, eval, evalq, Filter, Find, get, intersect, is.unsorted,
    lapply, Map, mapply, match, mget, order, paste, pmax, pmax.int,
    pmin, pmin.int, Position, rank, rbind, Reduce, rep.int, rownames,
    sapply, setdiff, sort, table, tapply, union, unique, unlist

Loading required package: IRanges

Attaching package: ‘IRanges’

The following objects are masked from ‘package:dplyr’:

    collapse, desc

Loading required package: XVector

Attaching package: ‘Biostrings’

The following object is masked from ‘package:seqinr’:

    translate

> library(doMC)
> # library(myTAI)
> 
> try({ detach("package:orthologr", unload=TRUE) })
Error in detach("package:orthologr", unload = TRUE) : 
  invalid 'name' argument
> remove.packages("orthologr", lib="~/R/x86_64-pc-linux-gnu-library/3.0")
> install_github(username = "HajkD", repo = "orthologr", 
+                auth_token = "648ceafa0bcccf9d958de955e4b4b5c966bfca1a" )
Downloading github repo HajkD/orthologr@master
Installing orthologr
'/usr/lib/R/bin/R' --vanilla CMD INSTALL  \
  '/tmp/RtmpV8Yk3y/devtools1d1273892776/HajkD-orthologr-90103eb2b7afe8a13a300328835d7591111cfb25'  \
  --library='/home/sarah/R/x86_64-pc-linux-gnu-library/3.0' --install-tests 

* installing *source* package ‘orthologr’ ...
** R
** inst
** preparing package for lazy loading
** help
*** installing help indices
** building package indices
** testing if installed package can be loaded
* DONE (orthologr)
Warning message:
Username parameter is deprecated. Please use HajkD/orthologr 
> library("orthologr", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.0")
> 
> 
> 
> delete_foldertree<-function(){
+         
+         # determine the file seperator of the current OS
+         f_sep <- .Platform$file.sep
+         
+         if(file.exists(paste0("_alignment",f_sep))){
+                 
+                 system(paste0("rm -r _alignment",f_sep))
+         }
+         if(file.exists(paste0("_blast",f_sep))){
+                 
+                 system(paste0("rm -r _blast",f_sep))
+         }
+         if(file.exists(paste0("_blast_db",f_sep))){
+                 
+                 system(paste0("rm -r _blast_db",f_sep))
+         }
+         if(file.exists(paste0("_calculation",f_sep))){
+                 
+                 system(paste0("rm -r _calculation",f_sep))
+         }
+         
+ }
> 
> 
> 
> 
> 
> query_files <- c( "cds/sample_q_100.fasta","cds/sample_s_100.fasta")
> subject_files <- c( "cds/sample_s_100.fasta", "cds/sample_q_100.fasta")
> blast_mode <- c( "BH", "RBH")
> 
> 
> # query_files <- c( "cds/Drosophila_melanogaster.BDGP5.cds.all.fa",
> #                  "cds/Schizosaccharomyces_pombe.ASM294v2.23.cdna.all.fa")
> # subject_files <- c( "cds/dana-all-CDS-r1.3.fasta", 
> #                     "cds/Schizosaccharomyces_octosporus.GCA_000150505.2.23.cds.all.fa")
> 
> # 
> sapply(query_files, file.exists)
cds/sample_q_100.fasta cds/sample_s_100.fasta 
                  TRUE                   TRUE 
> sapply(subject_files, file.exists)
cds/sample_s_100.fasta cds/sample_q_100.fasta 
                  TRUE                   TRUE 
> 
> # query_files <- c("cds/Athaliana_167_cds.fa", "_minExample/ortho_thal_cds_100.fasta","_minExample/ortho_lyra_cds_100.fasta")
> # subject_files <- c("cds/Alyrata_107_cds.fa","_minExample/ortho_lyra_cds_100.fasta", "_minExample/ortho_thal_cds_100.fasta")
> 
> # nPairs <- 100
> # i<-2
> # create_test_sample(query_files[i], subject_files[i], nPairs=nPairs)
> # dNdS(query_file = paste0("_minExample/sample_q_",nPairs,".fasta"),
> #      subject_file = paste0("_minExample/sample_s_",nPairs,".fasta"), 
> #      comp_cores = 1,   ortho_detection = "BH", aa_aln_type = "multiple",
> #      aa_aln_tool = "mafft", codon_aln_tool = "pal2nal", dnds_est.method = "Comeron")
> 
> 
> time <- 0.0
> 
> for(i in c(1:length(query_files))){
+         run <- 5+i
+         delete_foldertree()
+         
+         start <- Sys.time()
+         # default offenbar nicht quiet?!
+         res <- dNdS(query_file = query_files[i],
+                     subject_file = subject_files[i], 
+                     comp_cores = 4,   ortho_detection = blast_mode[i], aa_aln_type = "pairwise",
+                     aa_aln_tool = "NW", codon_aln_tool = "pal2nal", dnds_est.method = "Comeron")
+         
+         end <- Sys.time()
+         intervall <-abs(start-end)
+         time <- c(time, as.numeric(intervall,units='hours'))
+ 
+         # write Divergences Map
+         write.table(res[,dNdS, by=c('query_id','subject_id')], 
+                     file=paste0("Runs/divergenceMap_Run_",run,".csv") ,sep="\t", 
+                     row.names=FALSE,quote =FALSE)
+         # save Full Result
+         write.csv(res, file=paste0("Runs/Run_",run,".csv"), quote=FALSE, row.names=FALSE)
+         
+          dt <- data.table(read.table(file=paste0("Runs/divergenceMap_Run_",run,".csv") ,sep="\t", header=TRUE))
+          dm <- DivergenceMap(dt)
+          write.table(dm, file=paste0("Runs/decileMap_Run_",run,".csv") ,sep="\t", 
+                      row.names=FALSE,quote =FALSE)
+ }


Building a new DB, current time: 10/08/2014 16:28:54
New DB name:   out_sample_s_100.fasta_translate.fasta
New DB title:  out_sample_s_100.fasta_translate.fasta
Sequence type: Protein
Keep Linkouts: T
Keep MBits: T
Maximum file size: 1000000000B
Adding sequences from FASTA; added 90 sequences in 0.00907302 seconds.
[1] "File successfully written to _alignment/pairwise_aln/q4_NW_AA.aln"
[1] "File successfully written to _alignment/pairwise_aln/q2_NW_AA.aln"
[1] "Codon Alignment successfully written in _alignment/codon_aln/q4_pal2nal.aln."
[1] "Codon Alignment successfully written in _alignment/codon_aln/q2_pal2nal.aln."
[1] "Substitutionrate successfully calculated by gestimator"
[1] "Substitutionrate successfully calculated by gestimator"
[1] "File successfully written to _alignment/pairwise_aln/q1_NW_AA.aln"
[1] "File successfully written to _alignment/pairwise_aln/q3_NW_AA.aln"
[1] "Codon Alignment successfully written in _alignment/codon_aln/q1_pal2nal.aln."
[1] "Substitutionrate successfully calculated by gestimator"
[1] "Codon Alignment successfully written in _alignment/codon_aln/q3_pal2nal.aln."
[1] "Substitutionrate successfully calculated by gestimator"
[1] "File successfully written to _alignment/pairwise_aln/q5_NW_AA.aln"
[1] "Codon Alignment successfully written in _alignment/codon_aln/q5_pal2nal.aln."
[1] "Substitutionrate successfully calculated by gestimator"


Building a new DB, current time: 10/08/2014 16:28:58
New DB name:   out_sample_q_100.fasta_translate.fasta
New DB title:  out_sample_q_100.fasta_translate.fasta
Sequence type: Protein
Keep Linkouts: T
Keep MBits: T
Maximum file size: 1000000000B
Adding sequences from FASTA; added 36 sequences in 0.00435305 seconds.


Building a new DB, current time: 10/08/2014 16:28:58
New DB name:   out_sample_s_100.fasta_translate.fasta
New DB title:  out_sample_s_100.fasta_translate.fasta
Sequence type: Protein
Keep Linkouts: T
Keep MBits: T
Maximum file size: 1000000000B
Adding sequences from FASTA; added 90 sequences in 0.00911403 seconds.
[1] "File successfully written to _alignment/pairwise_aln/q2_NW_AA.aln"
[1] "File successfully written to _alignment/pairwise_aln/q3_NW_AA.aln"
[1] "Codon Alignment successfully written in _alignment/codon_aln/q2_pal2nal.aln."
[1] "File successfully written to _alignment/pairwise_aln/q4_NW_AA.aln"
[1] "Substitutionrate successfully calculated by gestimator"
[1] "Codon Alignment successfully written in _alignment/codon_aln/q3_pal2nal.aln."
[1] "Codon Alignment successfully written in _alignment/codon_aln/q4_pal2nal.aln."
[1] "Substitutionrate successfully calculated by gestimator"
[1] "Substitutionrate successfully calculated by gestimator"
[1] "File successfully written to _alignment/pairwise_aln/q1_NW_AA.aln"
[1] "Codon Alignment successfully written in _alignment/codon_aln/q1_pal2nal.aln."
[1] "Substitutionrate successfully calculated by gestimator"
[1] "File successfully written to _alignment/pairwise_aln/q5_NW_AA.aln"
[1] "Codon Alignment successfully written in _alignment/codon_aln/q5_pal2nal.aln."
[1] "Substitutionrate successfully calculated by gestimator"
> 
> for(i in c(1:length(query_files))){
+ 	print(paste0(5+i," : ",time[i+1]))
+ }
[1] "6 : 0.00116274144914415"
[1] "7 : 0.00137100709809197"
> 
> proc.time()
   user  system elapsed 
 28.223   2.274  41.007 
